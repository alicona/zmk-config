/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    tapping-term-ms = <300>;
};

/*
* &adc {
* 	status = "okay";
* };
*/

/ {
    /*    chosen {
*	zmk,battery = &vbatt;
*    };
*    vbatt: vbatt {
*	compatible = "zmk,battery-voltage-divider";
*	io-channels = <&adc 2>;
*	output-ohms = <2000000>;
*    };
*/

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <10 19>;
            bindings = <&kp ESC>;
        };

        combo_underscored {
            bindings = <&kp UNDERSCORE>;
            key-positions = <23 26>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <3 6>;
        };

        combo_capslock {
            bindings = <&caps_word>;
            key-positions = <20 29>;
        };

        combo_bluetooth {
            bindings = <&mo 5>;
            key-positions = <30 33>;
        };
    };

    behaviors {
        rpi: rpi {
            compatible = "zmk,behavior-hold-tap";
            label = "RPI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE_layer {
            bindings = <
&kp Q            &kp W            &kp E          &kp R         &kp T          &kp Y        &kp U                &kp I              &kp O            &kp P
&rpi LEFT_WIN A  &rpi LEFT_ALT S  &rpi LSHIFT D  &rpi LCTRL F  &kp G          &kp H        &mt RIGHT_CONTROL J  &mt RIGHT_SHIFT K  &mt RIGHT_ALT L  &mt RIGHT_WIN SEMICOLON
&kp Z            &kp X            &kp C          &kp V         &kp B          &kp N        &kp M                &kp COMMA          &kp DOT          &kp SLASH
                                                 &lt 3 TAB     &lt 1 SPACE    &lt 2 ENTER  &lt 4 BACKSPACE
            >;
        };

        NAV_layer {
            bindings = <
&none  &none  &none  &none  &none    &none  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&none  &none  &none  &none  &none    &none  &kp LEFT          &kp DOWN_ARROW     &kp UP_ARROW          &kp RIGHT_ARROW
&none  &none  &none  &none  &none    &none  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GREATER_THAN      &kp LESS_THAN
                     &none  &none    &none  &none
            >;
        };

        SYM_layer {
            bindings = <
&kp DELETE        &none      &kp ASTERISK  &kp AMPERSAND    &kp BACKSLASH    &none   &none   &none   &none   &none
&kp SINGLE_QUOTE  &kp CARET  &kp PERCENT   &kp DOLLAR       &kp PLUS         &trans  &trans  &trans  &trans  &trans
&kp GRAVE         &kp HASH   &kp AT_SIGN   &kp EXCLAMATION  &kp PIPE         &none   &none   &none   &none   &none
                                           &none            &none            &none   &none
            >;
        };

        NUM_layer {
            bindings = <
&none   &none   &none   &none   &none     &kp EQUAL     &kp N7  &kp N8  &kp N9  &kp PLUS
&trans  &trans  &trans  &trans  &trans    &kp ASTERISK  &kp N4  &kp N5  &kp N6  &kp MINUS
&none   &none   &none   &none   &none     &kp N0        &kp N1  &kp N2  &kp N3  &kp FSLH
                        &none   &none     &none         &none
            >;
        };

        function_layer {
            bindings = <
&none  &kp F12  &kp F11  &kp F10  &kp F9    &none   &none   &none   &none   &none
&none  &kp F8   &kp F7   &kp F6   &kp F5    &trans  &trans  &trans  &trans  &trans
&none  &kp F4   &kp F3   &kp F2   &kp F1    &none   &none   &none   &none   &none
                         &none    &none     &none   &none
            >;
        };

        bluetooth_5 {
            bindings = <
&trans  &trans  &trans        &trans        &trans    &trans  &trans        &trans        &trans  &trans
&trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &trans    &trans  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans
&trans  &trans  &trans        &trans        &trans    &trans  &trans        &trans        &trans  &trans
                              &trans        &trans    &trans  &trans
            >;
        };
    };
};
